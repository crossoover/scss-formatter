{"version":3,"sources":["structure.ts","App.tsx","index.tsx"],"names":["STRUCTURE","App","useState","startValue","setStartValue","parsedValue","setParsedValue","isCopiedAlertShown","setIsCopiedAlertShown","divideIntoBlocks","value","res","split","map","item","parsedItem","top","main","i","length","includes","enums","Object","keys","filter","x","parseInt","arr","Array","fill","j","splice","join","replaceAll","relocateValues","slice","console","log","useEffect","className","onChange","e","target","onClick","a","setTimeout","text","document","querySelector","textContent","navigator","clipboard","writeText","id","disabled","ReactDOM","render","StrictMode","getElementById"],"mappings":"uJAAYA,E,wEAAAA,O,gCAAAA,I,4BAAAA,I,kBAAAA,I,sBAAAA,I,wBAAAA,I,oBAAAA,I,sBAAAA,I,sBAAAA,I,0BAAAA,I,0BAAAA,I,2CAAAA,I,mCAAAA,I,uCAAAA,I,iCAAAA,I,qBAAAA,I,iCAAAA,I,+BAAAA,I,yCAAAA,I,+BAAAA,I,+BAAAA,I,mCAAAA,I,2BAAAA,I,qCAAAA,I,iCAAAA,I,mCAAAA,I,qCAAAA,I,mCAAAA,I,mCAAAA,I,+CAAAA,I,+CAAAA,I,+CAAAA,I,uBAAAA,I,+BAAAA,I,+BAAAA,I,yBAAAA,I,iCAAAA,I,iCAAAA,I,yBAAAA,I,iCAAAA,I,qCAAAA,I,uCAAAA,I,mCAAAA,I,2BAAAA,I,mCAAAA,I,uCAAAA,I,yCAAAA,I,qCAAAA,I,yBAAAA,I,uCAAAA,I,qCAAAA,I,qCAAAA,I,qCAAAA,I,yCAAAA,I,2CAAAA,I,iCAAAA,I,6CAAAA,I,6CAAAA,I,6CAAAA,I,yDAAAA,I,2DAAAA,I,uCAAAA,I,mDAAAA,I,mDAAAA,I,mDAAAA,I,+DAAAA,I,iEAAAA,I,mCAAAA,I,+CAAAA,I,+CAAAA,I,+CAAAA,I,qCAAAA,I,iDAAAA,I,iDAAAA,I,iDAAAA,I,2BAAAA,I,uCAAAA,I,yCAAAA,I,uCAAAA,I,uCAAAA,I,iCAAAA,I,uDAAAA,I,2CAAAA,I,6CAAAA,I,+CAAAA,I,mDAAAA,I,+CAAAA,I,2CAAAA,I,6BAAAA,I,iCAAAA,I,iCAAAA,I,iCAAAA,I,2BAAAA,I,uBAAAA,I,qBAAAA,I,mCAAAA,I,+BAAAA,I,6CAAAA,I,mCAAAA,I,iCAAAA,I,qCAAAA,I,kCAAAA,I,4CAAAA,I,4CAAAA,I,sDAAAA,I,wDAAAA,I,wDAAAA,I,oCAAAA,I,sCAAAA,I,wCAAAA,I,oCAAAA,I,0CAAAA,I,0CAAAA,I,oCAAAA,I,kCAAAA,I,sCAAAA,I,gCAAAA,I,oCAAAA,I,kCAAAA,I,4CAAAA,I,oDAAAA,I,8CAAAA,I,gCAAAA,I,8CAAAA,I,4CAAAA,I,0BAAAA,I,gCAAAA,I,4CAAAA,I,oDAAAA,I,kDAAAA,I,oDAAAA,I,gEAAAA,I,0CAAAA,I,sDAAAA,I,gEAAAA,I,kCAAAA,I,8CAAAA,I,oDAAAA,I,oDAAAA,I,mEAAAA,M,sBCgGGC,EA3FH,WACV,MAAoCC,mBAAiB,IAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAiB,IAAvD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoDJ,oBAAkB,GAAtE,mBAAOK,EAAP,KAA2BC,EAA3B,KAyBMC,EAAmB,SAACC,GACxB,IAAMC,EAAMD,EACTE,MAAM,QACNC,KAAI,SAACC,GAIJ,IAHA,IAAMC,EAAaD,EAAKF,MAAM,SAC1BI,EAAM,GACNC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IACjCH,EAAWG,GAAGE,SAAS,MAAQL,EAAWG,GAAGE,SAAS,KACxDH,GAAQ,KAAOF,EAAWG,GAChBH,EAAWG,GAAGE,SAAS,OACjCJ,GAAO,KAAOD,EAAWG,IAI7B,OADAD,EArCiB,SAACP,GAMtB,IALA,IAAIW,EAAQC,OAAOC,KAAKvB,GAAWwB,QAAO,SAACC,GAAD,QAASC,SAASD,IAAM,MAC5Dd,EAAMD,EACTE,MAAM,SACNY,QAAO,SAACN,GAAD,OAAOA,EAAEE,SAAS,MAAQF,EAAEE,SAAS,QAC3CO,EAAW,IAAIC,MAAMP,EAAMF,QAAQU,KAAK,MACnCX,EAAI,EAAGA,EAAIP,EAAIQ,OAAQD,IAAK,CACnC,IAAK,IAAIY,EAAI,EAAGA,EAAIT,EAAMF,OAAQW,IAChC,GAAInB,EAAIO,GAAGE,SAASC,EAAMS,IAAK,CAC7BH,EAAII,OAAOD,EAAG,EAAGnB,EAAIO,IACrB,MAGCS,EAAIP,SAAST,EAAIO,KACpBS,EAAII,OAAOJ,EAAIR,OAAQ,EAAGR,EAAIO,IAGlC,OAAOS,EACJH,QAAO,SAACN,GAAD,OAAeA,KACtBc,KAAK,MACLC,WAAW,IAAK,IAiBRC,CAAejB,GACfD,EAAM,KAAOC,KAErBe,KAAK,MACLC,WAAW,IAAK,IAChBE,MAAM,GAET,OADAC,QAAQC,IAAI1B,GACLA,GAcT,OAJA2B,qBAAU,WACRhC,EAAeG,EAAiBN,MAC/B,CAACA,IAGF,sBAAKoC,UAAU,MAAf,UACE,0BACE7B,MAAOP,EACPqC,SAAU,SAACC,GAAD,OAAYrC,EAAcqC,EAAEC,OAAOhC,UAE/C,gCACE,4BAAIH,EAAqB,sBAAwB,kBACjD,wBACEoC,QAAO,sBAAE,8BAAAC,EAAA,yDAnBfpC,GAAsB,GACtBqC,YAAW,WACTrC,GAAsB,KACrB,OAkBWsC,EAFC,UAEMC,SAASC,cAAc,gBAF7B,aAEM,EAAiCC,aAFvC,gCAGSC,UAAUC,UAAUC,UAAUN,GAHvC,2CADX,kCAUF,0BACEO,GAAG,OACHC,UAAQ,EACR5C,MAAOL,EACPmC,SAAU,SAACC,GAAD,OAAYnC,EAAemC,EAAEC,OAAOhC,cCtFtD6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFV,SAASW,eAAe,W","file":"static/js/main.23999866.chunk.js","sourcesContent":["export enum STRUCTURE {\n  \"box-sizing:\",\n  \"position:\",\n  \"top:\",\n  \"right:\",\n  \"bottom:\",\n  \"left:\",\n  \"float:\",\n  \"clear:\",\n  \"z-index:\",\n  \"display:\",\n  \"justify-content:\",\n  \"align-items:\",\n  \"align-content:\",\n  \"align-self:\",\n  \"flex:\",\n  \"flex-basis:\",\n  \"flex-flow:\",\n  \"flex-direction:\",\n  \"flex-wrap:\",\n  \"flex-grow:\",\n  \"flex-shrink:\",\n  \"columns:\",\n  \"column-width:\",\n  \"column-gap:\",\n  \"column-span:\",\n  \"column-count:\",\n  \"column-fill:\",\n  \"column-rule:\",\n  \"column-rule-color:\",\n  \"column-rule-style:\",\n  \"column-rule-width:\",\n  \"width:\",\n  \"max-width:\",\n  \"min-width:\",\n  \"height:\",\n  \"max-height:\",\n  \"min-height:\",\n  \"margin:\",\n  \"margin-top:\",\n  \"margin-right:\",\n  \"margin-bottom:\",\n  \"margin-left:\",\n  \"padding:\",\n  \"padding-top:\",\n  \"padding-right:\",\n  \"padding-bottom:\",\n  \"padding-left:\",\n  \"border:\",\n  \"border-radius:\",\n  \"border-width:\",\n  \"border-style:\",\n  \"border-color:\",\n  \"border-spacing:\",\n  \"border-collapse:\",\n  \"border-top:\",\n  \"border-top-width:\",\n  \"border-top-style:\",\n  \"border-top-color:\",\n  \"border-top-left-radius:\",\n  \"border-top-right-radius:\",\n  \"border-bottom:\",\n  \"border-bottom-width:\",\n  \"border-bottom-style:\",\n  \"border-bottom-color:\",\n  \"border-bottom-left-radius:\",\n  \"border-bottom-right-radius:\",\n  \"border-left:\",\n  \"border-left-color:\",\n  \"border-left-style:\",\n  \"border-left-width:\",\n  \"border-right:\",\n  \"border-right-color:\",\n  \"border-right-style:\",\n  \"border-right-width:\",\n  \"outline:\",\n  \"outline-color:\",\n  \"outline-offset:\",\n  \"outline-style:\",\n  \"outline-width:\",\n  \"background:\",\n  \"background-attachment:\",\n  \"background-clip:\",\n  \"background-image:\",\n  \"background-origin:\",\n  \"background-position:\",\n  \"background-repeat:\",\n  \"background-size:\",\n  \"overflow:\",\n  \"overflow-x:\",\n  \"overflow-y:\",\n  \"visibility:\",\n  \"opacity:\",\n  \"color:\",\n  \"font:\",\n  \"font-family:\",\n  \"font-size:\",\n  \"font-size-adjust:\",\n  \"font-weight:\",\n  \"font-style:\",\n  \"font-stretch:\",\n  \"text-align:\",\n  \"text-align-last:\",\n  \"text-decoration:\",\n  \"text-decoration-line:\",\n  \"text-decoration-color:\",\n  \"text-decoration-style:\",\n  \"text-indent:\",\n  \"text-justify:\",\n  \"text-overflow:\",\n  \"text-shadow:\",\n  \"text-transform:\",\n  \"letter-spacing:\",\n  \"white-space:\",\n  \"word-break:\",\n  \"word-spacing:\",\n  \"word-wrap:\",\n  \"line-height:\",\n  \"list-style:\",\n  \"list-style-type:\",\n  \"list-style-position:\",\n  \"list-style-image:\",\n  \"transform:\",\n  \"transform-origin:\",\n  \"transform-style:\",\n  \"cursor:\",\n  \"animation:\",\n  \"animation-delay:\",\n  \"animation-direction:\",\n  \"animation-duration:\",\n  \"animation-fill-mode:\",\n  \"animation-iteration-count:\",\n  \"animation-name:\",\n  \"animation-play-state:\",\n  \"animation-timing-function:\",\n  \"transition:\",\n  \"transition-delay:\",\n  \"transition-duration:\",\n  \"transition-property:\",\n  \"transition-timing-function:\",\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { STRUCTURE } from \"./structure\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [startValue, setStartValue] = useState<string>(\"\");\n  const [parsedValue, setParsedValue] = useState<string>(\"\");\n  const [isCopiedAlertShown, setIsCopiedAlertShown] = useState<boolean>(false);\n\n  const relocateValues = (value: string) => {\n    let enums = Object.keys(STRUCTURE).filter((x) => !(parseInt(x) >= 0));\n    const res = value\n      .split(/\\r?\\n/)\n      .filter((i) => i.includes(\";\") && i.includes(\":\"));\n    let arr: any = new Array(enums.length).fill(null);\n    for (let i = 0; i < res.length; i++) {\n      for (let j = 0; j < enums.length; j++) {\n        if (res[i].includes(enums[j])) {\n          arr.splice(j, 0, res[i]);\n          break;\n        }\n      }\n      if (!arr.includes(res[i])) {\n        arr.splice(arr.length, 0, res[i]);\n      }\n    }\n    return arr\n      .filter((i: string) => i)\n      .join(\"\\n\")\n      .replaceAll(\";\", \"\");\n  };\n\n  const divideIntoBlocks = (value: string) => {\n    const res = value\n      .split(\"\\n\\n\")\n      .map((item) => {\n        const parsedItem = item.split(/\\r?\\n/);\n        let top = \"\";\n        let main = \"\";\n        for (let i = 0; i < parsedItem.length; i++) {\n          if (parsedItem[i].includes(\";\") && parsedItem[i].includes(\":\")) {\n            main += \"\\n\" + parsedItem[i];\n          } else if (!parsedItem[i].includes(\"}\")) {\n            top += \"\\n\" + parsedItem[i];\n          }\n        }\n        main = relocateValues(main);\n        return top + \"\\n\" + main;\n      })\n      .join(\"\\n\")\n      .replaceAll(\"{\", \"\")\n      .slice(1);\n    console.log(res);\n    return res;\n  };\n\n  const showCopied = () => {\n    setIsCopiedAlertShown(true);\n    setTimeout(() => {\n      setIsCopiedAlertShown(false);\n    }, 3000);\n  };\n\n  useEffect(() => {\n    setParsedValue(divideIntoBlocks(startValue));\n  }, [startValue]);\n\n  return (\n    <div className=\"app\">\n      <textarea\n        value={startValue}\n        onChange={(e: any) => setStartValue(e.target.value)}\n      />\n      <div>\n        <p>{isCopiedAlertShown ? \"Copied to clipboard\" : \"Click to copy\"}</p>\n        <button\n          onClick={async () => {\n            showCopied();\n            const text = document.querySelector(\"#text\")?.textContent;\n            if (text) await navigator.clipboard.writeText(text);\n          }}\n        >\n          Copy to clipboard\n        </button>\n      </div>\n      <textarea\n        id=\"text\"\n        disabled\n        value={parsedValue}\n        onChange={(e: any) => setParsedValue(e.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}